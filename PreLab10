// Johann Haeussler 21223
// PIC16F887
// PreLab10
 
// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
 
// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)
 
#include <xc.h>
#include <string.h>
#include <stdint.h>
#define _XTAL_FREQ 1000000
 
void setup (void);
void cadena(char txt[]);
void menu(void);
 
int contador, bandera;
 
void __interrupt () isr (void){     //Vector interrupciones
 
    if(INTCONbits.RBIF){        //Interrupcion del PORTB
        if(RB0 == 0){  
            contador += 1;
        }
        if(RB1 == 0){ 
            contador -= 1;
        }
        INTCONbits.RBIF = 0;
    }
 
    if(PIR1bits.RCIF)       //Interrupcion entrada EUSART
    {
 
        if(bandera == 1){
            PORTA = RCREG;
            bandera = 0;
            menu();             //Menu
        }
        else if(RCREG == 50){        //Si el valor ingresado es 2
 
            cadena("Presionar cualquier valor que desee tener: ");
            __delay_ms(15);
            bandera = 1;
        }
        else if(RCREG == 49){            //Si el valor ingresado es 1
            cadena("El valor que tiene el contador es de: ");
            __delay_ms(15);
 
            TXREG = contador;
         
 
            __delay_ms(15);
            menu();         //Mostrar menu
        }
 
    }
}
 
void setup (void){
 
    ANSEL = 0;             //AN0
    ANSELH = 0;
    TRISA = 0;
    TRISB = 255;
    PORTB = 0;
    contador = 0;
 
    //Configuracion EUSART
    TXSTAbits.SYNC = 0;             //Modo asincrono
    TXSTAbits.BRGH = 1;             //High speed baud rate
 
    BAUDCTLbits.BRG16 = 1;          //16-bit Baud Rate
    SPBRG = 25;
    SPBRGH = 0;
 
    RCSTAbits.SPEN = 1;             //Serial port enable
    RCSTAbits.RX9 = 0;              //8 bits de datos
    RCSTAbits.CREN = 1;             //Habilitar para recibir datos
 
    TXSTAbits.TXEN = 1;             //Habilitar para enviar datos
 
    //Interrupciones EUSART
    PIR1bits.RCIF = 0;            //Bandera RX
    PIE1bits.RCIE = 1;            //INT EUSART RC
 
    //Configuracion de interrupciones
    INTCONbits.GIE = 1;         //INT globales
    INTCONbits.PEIE=1;          //INT perifericas
 
    //Configuracion de pullups para el PORTB
    OPTION_REGbits.nRBPU = 0;
    WPUBbits.WPUB0 = 1;
    WPUBbits.WPUB1 = 1;
 
    //Configuracion de interrupciones PORTB
    INTCONbits.RBIE = 1;
    INTCONbits.RBIF = 0;
    IOCBbits.IOCB0 = 1;
    IOCBbits.IOCB1 = 1;
 
    //Configuraacion de oscilador interno
    OSCCONbits.IRCF=0b100;      //1MHz oscilador interno   
    OSCCONbits.SCS=1;
 
    T2CONbits.TMR2ON = 1;       //Encender TMR2
 
    return;
 
} 
 
void main(void) {
    setup();
    menu();
    while(1){
    }
    return;
}
 
 
void cadena(char txt[]){            //Funcion para enviar una cadena de chars
 
    int j = strlen(txt);            //Largo de la cadena
 
    for(int i = 0; i <= j; ++i){    //Enviar caracter por caracter
        __delay_ms(15);
        TXREG = txt[i];
    }
 
}
 
 
void menu(void){                    //Menu a mostrar con la funcion de cadena
 
    TXREG = 13; //ENTER
    cadena("============= MENÃš =============\n");
    TXREG = 13; //ENTER
    cadena("1. Leer contador\n");
    TXREG = 13; //ENTER
    cadena("2. Enviar valor a contador\n");
    TXREG = 13; //ENTER
    cadena("Ingrese una opcion: \n");
    TXREG = 13; //ENTER
        
}
